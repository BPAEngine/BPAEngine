
# -------------------------------------------------------------------------
# Message scroll
# -------------------------------------------------------------------------

MessageScroll = fun (config)
  {
    new_object =  [] | global.MessageScroll | global.Object(config);
    new_object.class = "MessageScroll";
    new_object.z = config.z | 10000;
    new_object.color = config.color | [0,0,0];

    new_object.max_lines = config.max_lines | 10;
    new_object.faded_lines = config.faded_lines | 3;
    local.opacity = 1.0;
    for (local.i = 0; local.i < new_object.max_lines; local.i++) {
      new_object.lines[local.i] = Image.Text("", 0, 0, 0);
      new_object.message_sprite[local.i] = Sprite();
      new_object.message_sprite[local.i].SetPosition(20, 150 + (local.i * 20), new_object.z);
      if (local.i < new_object.faded_lines)
        local.opacity = 1.2 - ((new_object.faded_lines - local.i) / new_object.faded_lines);
      new_object.message_sprite[local.i].SetOpacity(local.opacity);
    }
    return new_object;
  } | [];

MessageScroll.Add = fun (message)
  {
    # Shift messages up
    for (local.i = 0; local.i < max_lines - 1; local.i++) {
      lines[local.i] = lines[local.i+1];
    }

    lines[max_lines - 1] = Image.Text(message, color[0], color[1], color[2]);

    # Re-positioning the text images
    for (local.i = 0; local.i < max_lines; local.i++) {
      message_sprite[local.i].SetImage(lines[local.i]);
    }
  };

/*
NUM_SCROLL_LINES=10;
LINE_WIDTH=55;

# width of one character doesnt work------------
CHAR_WIDTH = 7;
# height of one character
CHAR_HEIGHT = 10;
#------------------------

pretext = String("");

#scroll message function


msg_color = [0,0,0]; # msg_color is array

if (status == "failed") msg_color = [1,0,0];
if (status == "warning") msg_color = [0.8,0.8,0];
if (status == "normal") msg_color = [0.5,0.5,0.5];

fun scroll_message_callback(text)
{
  ##nobreak function
  nobreak = 0;
  if (text.CharAt(0) == ">") {    # "no linebreak" flag, like "-n"
   text = text.SubString(1, String.Size(text)); # remove ">" at front
   nobreak = 1;
  }

  if ((pretext == "") || (String.Size(text) > 15))
  {
    if (text == ".") return;    # ignore messages of only a single dot
    if (nobreak == 1) pretext = text;

    #Truncate the message if too long
    text = String.Truncate(text, LINE_WIDTH);

    #Shift message one up
    for (i = 0; i < NUM_SCROLL_LINES - 1; i++) {
      lines[i] = lines[i+1];
    }
  }
  else
  {
    # the previous message was flagged to have no linebreak
    # Truncate the message if too long
    text = String.Truncate(text, LINE_WIDTH);ext += "...";
    }

    # Truncate the previous message if too long
    pretext = String.Truncate(pretext, LINE_WIDTH);
    if (String.Size(pretext) > (LINE_WIDTH - String.Size(text))) {
      pretext = pretext.SubString(0, LINE_WIDTH - String.Size(text) - 3);
      pretext += "...";
    }

    text = pretext + text;

    if (nobreak == 1)
      pretext = text;
    else
      pretext = ">";
  }
}
*/
