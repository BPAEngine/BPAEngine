
# -------------------------------------------------------------------------
# BPAE.PasswordDialog simple/box
# -------------------------------------------------------------------------

BPAE.PasswordDialog = fun (config)
  {
    new_object =  [] | global.BPAE.PasswordDialog | global.BPAE.Dialog(config);
    new_object.class = "BPAE.PasswordDialog";

    new_object.subtext_config.z =  10; # BPAE.DIALOG_Z + 10
    new_object.subtext_config.font_color = new_object.prompt_config.font_color;
    new_object.subtext_config.font_type  = "Sans";
    new_object.subtext_config.font_size  = new_object.prompt_config.font_size * 0.7;
    new_object.subtext = BPAE.Text(new_object.subtext_config);

    if (new_object.mode == "window") {
      new_object.lock_config.image_path = config.lock_config.image_path  | "static/password_dialog/black_lock.png";
    } else {
      new_object.lock_config.image_path = config.lock_config.image_path  | "static/password_dialog/white_lock.png";
    }

    new_object.lock_config.z =  10; # BPAE.DIALOG_Z + 10
    new_object.lock_icon = BPAE.StaticImage(new_object.lock_config);

    new_object.use_bullets =  config.use_bullets | TRUE;
    if (new_object.use_bullets) {
      local.bullets_config.bullet_size = new_object.input_text_config.font_size;
      new_object.bullets_config.z =  10; # BPAE.DIALOG_Z + 10
      new_object.input_bullets = BPAE.BulletedPassword(bullets_config);
    }

    return new_object;
  } | [];

BPAE.PasswordDialog.Build = fun ()
  {
    Add(dimmer);
    Add(prompt);
    Add(input_box);
    Add(input_text);
    if (use_bullets) {
      Add(input_bullets);
    }
    Add(lock_icon);
    Add(subtext);
    if (mode == "window") {
      Add(window);
    }
  };

BPAE.PasswordDialog.Prompt = fun (text, bullets_number)
  {
    AlignToObject(world, "cm", "cm");
    dimmer.AlignToObject(world, "lt", "lt");
    local.text_length = String.Size(text);
    if (text_length > 34)
    {
      local.new_text = text.SubString(0,34);
      subtext.SetText(String.Multiline(text.SubString(35, text_length), 40)).AlignToObject(this, "ct", "cb");

      prompt.SetText(new_text).AlignToObject(subtext, "ct", "cb").MoveY(-10);
    }
    else {
      prompt.SetText(text).AlignToObject(this, "ct", "cb");
    }

    lock_icon.AlignToObject(prompt, "ct", "cb").MoveY(-10);

    if (this.mode == "window") {
      local.window_height = prompt.GetHeight() + lock_icon.GetHeight() + input_box.GetHeight() + 80;
      if (text_length > 34) {
        window_height += subtext.GetHeight() + 10;
      }
      window.SetHeight(window_height).SetWidth(prompt.GetWidth() + 80).AlignToObject(lock_icon, "ct", "ct").MoveY(-20);
      input_box.SetWidth(prompt.GetWidth());
    }

    input_box.AlignToObject(this, "cb", "ct").MoveY(30);

    if (use_bullets) {
      input_bullets.SetBullets(bullets_number, input_box.GetInnerWidth()).AlignToObject(input_box, "input", "lm");
    }
    else {
      input_text.SetText(String.Bullets(bullets_number), input_box.GetInnerWidth()).AlignToObject(input_box, "input", "lm");
    }

    Show();
    if (text_length <= 34)  {
      subtext.Hide();
    }
  };
