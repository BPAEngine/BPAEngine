
# -------------------------------------------------------------------------
# Object definition
# -------------------------------------------------------------------------

Object = fun (config, id)
  {
    new_object = [] | global.Object;
    new_object.id = id | "id_" + Math.Random() * 10000;
    new_object.class = "Object";

    new_object.x = config.x | 0;
    new_object.y = config.y | 0;
    new_object.z = config.z | 1;
    new_object.last_z = new_object.z;

    # For sprite displacement
    new_object.dx = config.dx | 0;
    new_object.dy = config.dy | 0;

    new_object.theta = config.theta | 0.0; # Starting angle for image rotation in degrees
    new_object.spin = config.spin | 0.0; # For image rotation

    new_object.orientation = config.orientation | 0.0; # In degrees
    new_object.speed = config.speed | 0.0;
    new_object.opacity = config.opacity | 1.0;

    new_object.speed_variator = config.speed_variator;
    new_object.orientation_variator = config.orientation_variator;
    new_object.opacity_variator = config.opacity_variator;

    new_object.animations = [];
    new_object.sprite = Sprite();
    new_object.sprite.SetPosition(new_object.x + new_object.dx, new_object.y + new_object.dy, new_object.z);
    new_object.sprite.SetOpacity(new_object.opacity);

    new_object.objects = [];

    return new_object;
  } | [];

Object.To_String = fun ()
  {
    return class + "{"+id+", c["+x+", "+y+", "+z+"], d["+dx+", "+dy+"], dim["+GetWidth()+", "+GetHeight()+"], speed:"+speed+", orientation:"+orientation+", opacity:"+opacity+"}";
  };

Object.ShowInfo = fun ()
  {
    this.info_sprite = Sprite(Image.Text(class + " ("+id+")\n{\n coord: ["+x+", "+y+", "+z+"]\n disp:  ["+dx+", "+dy+"]\n dim:   ["+GetWidth()+", "+GetHeight()+"]\n speed: "+speed+"\n orien: "+orientation+"\n opacity: "+opacity+"\n}", 1, 1, 1, 1, "Fixed 8"));
    this.info_sprite.SetPosition(GetX() + 20, GetY() + 20, TOP_Z);
  };

Object.Update = fun (delta)
  {
    theta += spin;
    for (local.i = 0; local.i < Array.Size(animations); local.i++)
    {
      animations[local.i].Update(delta, theta);
    }

    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].Update(delta);
    }

    if (orientation_variator)
    {
      orientation = orientation_variator.Next(orientation, delta);
    }
    if (speed_variator)
    {
      speed = speed_variator.Next(speed, delta);
    }
    if (opacity_variator)
    {
      opacity = opacity_variator.Next(opacity, delta);
      SetOpacity(opacity);
    }

    local.angle = ((orientation + 90.0) * Math.Pi) / 180.0;
    local.dx = speed * Math.Sin(local.angle);
    local.dy = speed * Math.Cos(local.angle);
    if (Math.Int(local.dx)) SetX(x + local.dx);
    if (Math.Int(local.dy)) SetY(y + local.dy);
    if (last_z != z) {
      SetZ(z);
      last_z = z;
    }
  };

Object.GetX = fun ()
  {
    return x + this.dx;
  };

Object.GetY = fun ()
  {
    return y + this.dy;
  };

Object.GetZ = fun ()
  {
    return z;
  };

Object.SetX = fun (x)
  {
    sprite.SetX(x + this.dx);
    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].SetX(x - this.x + objects[local.i].GetX()); # Subobjects are relative
    }
    this.x = x;
};

Object.SetY = fun (y)
  {
    sprite.SetY(y + this.dy);

    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].SetY(y - this.y + objects[local.i].GetY()); # Subobjects are relative
    }
    this.y = y;
  };

Object.SetZ = fun (z)
  {
    this.z = z;
    sprite.SetZ(z);

    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].SetZ(z + objects[local.i].GetZ()); # Subobjects are relative
    }
  };

Object.Set2DPosition = fun (x, y)
  {
    SetX(x);
    SetY(y);
  };

Object.Set3DPosition = fun (x, y, z)
  {
    SetX(x);
    SetY(y);
    SetZ(z);
  };

Object.MoveX = fun (dx)
  {
    SetX(x + dx);
  };

Object.MoveY = fun (dy)
  {
    SetY(y + dy);
  };

Object.Move2DPosition = fun (dx, dy)
  {
    MoveX(dx);
    MoveY(dy);
  };

Object.GetWidth = fun ()
  {
    return sprite.GetImage().GetWidth() | 0;
  };

Object.GetHeight = fun ()
  {
    return sprite.GetImage().GetHeight() | 0;
  };

Object.AlignToObject = fun (object, object_anchor, my_anchor)
  {
    local.object_anchor_x = object_anchor.CharAt(0); # Can be "l", "c", "r"
    local.object_anchor_y = object_anchor.CharAt(1); # Can be "t", "m", "b"
    local.my_anchor_x = my_anchor.CharAt(0);
    local.my_anchor_y = my_anchor.CharAt(1);
    local.dx = 0.0;
    local.dy = 0.0;
    if (local.my_anchor_x == "c") local.dx -= GetWidth() / 2.0;
    if (local.my_anchor_x == "r") local.dx -= GetWidth();
    if (local.object_anchor_x == "c") local.dx += object.GetWidth() / 2.0;
    if (local.object_anchor_x == "r") local.dx += object.GetWidth();
    if (local.my_anchor_y == "m") local.dy -= GetHeight() / 2.0;
    if (local.my_anchor_y == "b") local.dy -= GetHeight();
    if (local.object_anchor_y == "m") local.dy += object.GetHeight() / 2.0;
    if (local.object_anchor_y == "b") local.dy += object.GetHeight();
    Set2DPosition(object.GetX() + local.dx, object.GetY()  + local.dy);
  };

Object.PlayAnimation = fun (index)
  {
    animations[index].sprite = sprite;
    animations[index].Play();
  };

Object.Build = fun (index)
  {
    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].Build();
    }
  };

Object.Hide = fun ()
  {
    SetOpacity(0);
  };

Object.Show = fun ()
  {
    SetOpacity(opacity);
  };

Object.SetOpacity = fun (opacity)
  {
    sprite.SetOpacity(opacity);

    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].SetOpacity(opacity * objects[local.i].GetOpacity()); # Subobjects are opacity relative too
    }
  };

Object.GetOpacity = fun ()
  {
    return opacity;
  };

Object.Add = fun (object)
  {
    object.parent = this;
    Array.Add(objects, object);
  };
