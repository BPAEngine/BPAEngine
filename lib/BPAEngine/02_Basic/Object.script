
# -------------------------------------------------------------------------
# BPAE.Object definition
# -------------------------------------------------------------------------

BPAE.Object = fun (config)
  {
    new_object = [] | global.BPAE.Object;
    new_object.id = config.id | "id_" + Math.Int(Math.Random() * 10000);
    new_object.class = "BPAE.Object";

    new_object.x = config.x | 0;
    new_object.y = config.y | 0;
    new_object.z = config.z | 1;
    new_object.last_z = new_object.z;
    new_object.width = config.width | 0;
    new_object.height = config.height | 0;

    # For sprite displacement
    new_object.dx = config.dx | 0;
    new_object.dy = config.dy | 0;

    new_object.theta = config.theta | 0.0; # Starting angle for image rotation in degrees
    new_object.spin = config.spin | 0.0; # For image rotation

    new_object.orientation = config.orientation | 0.0; # In degrees
    new_object.speed = config.speed | 0.0;
    new_object.opacity = config.opacity | 1.0;

    new_object.speed_variator = config.speed_variator;
    new_object.orientation_variator = config.orientation_variator;
    new_object.opacity_variator = config.opacity_variator;

    new_object.animations = [];
    new_object.actual_animation = 0;

    new_object.sprite = Sprite();
    new_object.image_path = config.image_path;
    new_object.image = config.image;

    if (new_object.image_path || new_object.image) {
      new_object.image = new_object.image | Image(new_object.image_path);
      new_object.width = config.width | new_object.image.GetWidth();
      new_object.height = config.height | new_object.image.GetHeight();
      if (config.width > 0 || config.height > 0) {
        new_object.image = new_object.image.Scale(new_object.width, new_object.height);
      }
      new_object.sprite.SetImage(new_object.image);
    }
    new_object.sprite.SetPosition(new_object.x + new_object.dx, new_object.y + new_object.dy, new_object.z);
    new_object.sprite.SetOpacity(new_object.opacity);

    new_object.objects = [];

    new_object.anchors = config.anchors | []; # Named anchors to align to

    new_object.actions = [];

    return new_object;
  } | [];

BPAE.Object.To_String = fun ()
  {
    return class + "{"+id+", c["+x+", "+y+", "+z+"], d["+dx+", "+dy+"], dim["+GetWidth()+", "+GetHeight()+"], speed:"+speed+", orien:"+orientation+", opac:"+opacity+", objs:"+Array.Size(objects)+"}";
  };

BPAE.Object.ShowInfo = fun ()
  {
    this.info_sprite = Sprite(Image.Text(class + " ("+id+")\n{\n coord: ["+x+", "+y+", "+z+"]\n disp:  ["+dx+", "+dy+"]\n dim:   ["+GetWidth()+", "+GetHeight()+"]\n speed: "+speed+"\n orien: "+orientation+"\n opacity: "+opacity+"\n}", 1, 1, 1, 1, "Fixed 8"));
    this.info_sprite.SetPosition(GetX() + 20, GetY() + 20, BPAE.TOP_Z);
  };

BPAE.Object.CommandActions = fun (delta)
  {
    if (actions[0].state == "new") {
      StartAction(actions[0]);
    }

    if (actions[0].state == "running") {
      UpdateAction(actions[0], delta);
    }

    if (actions[0].state == "finished") {
      StopAction(actions[0]);
      Array.Pop(actions);
    }
  };

BPAE.Object.StartAction = fun (action)
  {
  };

BPAE.Object.UpdateAction = fun (action, delta)
  {
  };

BPAE.Object.StopAction = fun (action)
  {
  };

BPAE.Object.Update = fun (delta)
  {
    CommandActions(delta);

    theta += spin;
    animations[actual_animation].Update(delta, theta);

    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[i].Update(delta);
    }

    if (orientation_variator)
    {
      orientation = orientation_variator.Next(orientation, delta);
    }
    if (speed_variator)
    {
      speed = speed_variator.Next(speed, delta);
    }
    if (opacity_variator)
    {
      opacity = opacity_variator.Next(opacity, delta);
      SetOpacity(opacity);
    }

    local.angle = ((orientation + 90.0) * Math.Pi) / 180.0;
    local.dx = speed * Math.Sin(local.angle);
    local.dy = speed * Math.Cos(local.angle);
    if (Math.Int(local.dx)) SetX(x + local.dx);
    if (Math.Int(local.dy)) SetY(y + local.dy);
    if (last_z != z) {
      SetZ(z);
      last_z = z;
    }
    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].Update(delta);
      objects[local.i].UpdateSubobjects(delta);
    }
  };

BPAE.Object.GetX = fun ()
  {
    return x + this.dx;
  };

BPAE.Object.GetY = fun ()
  {
    return y + this.dy;
  };

BPAE.Object.GetZ = fun ()
  {
    return z;
  };

BPAE.Object.SetX = fun (x)
  {
    sprite.SetX(x + this.dx);
    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].SetX(x - this.x + objects[local.i].GetX()); # Subobjects are relative
    }
    this.x = x;
    return this;
};

BPAE.Object.SetY = fun (y)
  {
    sprite.SetY(y + this.dy);
    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].SetY(y - this.y + objects[local.i].GetY()); # Subobjects are relative
    }
    this.y = y;
    return this;
  };

BPAE.Object.SetZ = fun (z)
  {
    this.z = z;
    sprite.SetZ(z);

    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].SetZ(z + objects[local.i].GetZ()); # Subobjects are relative
    }
    return this;
  };

BPAE.Object.Set2DPosition = fun (x, y)
  {
    SetX(x);
    SetY(y);
    return this;
  };

BPAE.Object.Set3DPosition = fun (x, y, z)
  {
    SetX(x);
    SetY(y);
    SetZ(z);
    return this;
  };

BPAE.Object.MoveX = fun (dx)
  {
    SetX(x + dx);
    return this;
  };

BPAE.Object.MoveY = fun (dy)
  {
    SetY(y + dy);
    return this;
  };

BPAE.Object.Move2DPosition = fun (dx, dy)
  {
    MoveX(dx);
    MoveY(dy);
    return this;
  };

BPAE.Object.GetWidth = fun ()
  {
    if (IsImageConfigured()) {
      return sprite.GetImage().GetWidth() | 0;
    }
    else
    {
      return width;
    }
  };

BPAE.Object.GetHeight = fun ()
  {
    if (IsImageConfigured()) {
      return sprite.GetImage().GetHeight() | 0;
    }
    else
    {
      return height;
    }
  };

BPAE.Object.SetWidth = fun (new_width, use_ratio)
  {
    new_height = GetHeight();
    if (use_ratio) {
      actual_width = GetWidth() | 1;
      new_height = new_width * new_height / actual_width;
    }

    sprite.SetImage(sprite.GetImage().Scale(new_width, new_height));
    width = new_width;
    return this;
  };

BPAE.Object.SetHeight = fun (new_height, use_ratio)
  {
    new_width = GetWidth();
    if (use_ratio) {
      actual_height = GetHeight() | 1;
      new_width = new_width * new_height / actual_height;
    }

    sprite.SetImage(sprite.GetImage().Scale(new_width, new_height));
    height = new_height;
    return this;
  };

BPAE.Object.GetAnchor = fun (anchor_name)
  {
    return anchors[anchor_name];
  };

BPAE.Object.AlignToObject = fun (object, object_anchor, my_anchor)
  {
    local.dx = 0.0;
    local.dy = 0.0;

    if (GetAnchor(my_anchor)) {
      local.dx -= GetAnchor(my_anchor).x;
      local.dy -= GetAnchor(my_anchor).y;
    }
    else {
      local.my_anchor_x = my_anchor.CharAt(0);
      local.my_anchor_y = my_anchor.CharAt(1);
      if (my_anchor_x == "c") local.dx -= GetWidth() / 2.0;
      if (my_anchor_x == "r") local.dx -= GetWidth();
      if (my_anchor_y == "m") local.dy -= GetHeight() / 2.0;
      if (my_anchor_y == "b") local.dy -= GetHeight();
    }

    if (object.GetAnchor(object_anchor)) {
      local.dx += object.GetAnchor(object_anchor).x;
      local.dy += object.GetAnchor(object_anchor).y;
    }
    else {
      local.object_anchor_x = object_anchor.CharAt(0); # Can be "l", "c", "r"
      local.object_anchor_y = object_anchor.CharAt(1); # Can be "t", "m", "b"
      if (object_anchor_x == "c") local.dx += object.GetWidth() / 2.0;
      if (object_anchor_x == "r") local.dx += object.GetWidth();
      if (object_anchor_y == "m") local.dy += object.GetHeight() / 2.0;
      if (object_anchor_y == "b") local.dy += object.GetHeight();
    }
    Set2DPosition(object.GetX() + local.dx, object.GetY()  + local.dy);
    return this;
  };

BPAE.Object.PlayAnimation = fun (index)
  {
    animations[index].sprite = sprite;
    animations[index].Play();
    width = sprite.GetImage().GetWidth();
    height = sprite.GetImage().GetHeight();
    this.actual_animation = index;
    return this;
  };

BPAE.Object.Build = fun (index)
  {
  };

BPAE.Object.BuildSubobjects = fun (index)
  {
    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].Build();
      objects[local.i].BuildSubobjects();
    }
  };

BPAE.Object.Hide = fun ()
  {
    SetSpritesOpacity(0);
    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].Hide();
    }
    return this;
  };

BPAE.Object.Show = fun ()
  {
    SetSpritesOpacity(this.opacity);
    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].Show();
    }
    return this;
  };

BPAE.Object.SetSpritesOpacity = fun (new_opacity)
  {
    sprite.SetOpacity(new_opacity);
  };

BPAE.Object.SetOpacity = fun (new_opacity)
  {
    this.opacity = new_opacity;
    SetSpritesOpacity(this.opacity);

    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].SetOpacity(this.opacity * objects[local.i].GetOpacity()); # Subobjects are opacity relative too
    }
    return this;
  };

BPAE.Object.GetOpacity = fun ()
  {
    return opacity;
  };

BPAE.Object.Add = fun (object)
  {
    object.parent = this;
    object.world = this.world;
    Array.Add(objects, object);
  };

BPAE.Object.IsImageConfigured = fun ()
  {
      return image || image_path;
  };
