
# -------------------------------------------------------------------------
# World definition
# -------------------------------------------------------------------------

World = fun (config)
  {
    new_world = [] | global.World;
    new_world.background_colors = config.background_colors | [Color.FromPalette("Gray"), Color.FromPalette("DarkGray")];

    new_world.tick = 0;
    new_world.time = 0.0;
    new_world.delta = 0.0;
    new_world.speed = 1.0;

    new_world.width = Window.GetMaxWidth();
    new_world.height = Window.GetMaxHeight();
    new_world.screen_ratio = new_world.height / new_world.width;
    new_world.center.x = new_world.width / 2;
    new_world.center.y = new_world.height / 2;

    new_world.objects = [];
    new_world.objects_by_name = [];
    return new_world;
  } | [];

World.SetBackgroundColors = fun ()
  {
    Window.SetBackgroundTopColor(background_colors[0][0], background_colors[0][1], background_colors[0][2]);
    Window.SetBackgroundBottomColor(background_colors[1][0], background_colors[1][1], background_colors[1][2]);
  };

World.Build = fun ()
  {
    SetBackgroundColors();
    Setup();
    if (this.dialog) this.dialog.Hide();
    if (this.password_dialog) this.password_dialog.Hide();
    for (local.i = 0; local.i < Array.Size(objects); local.i++)
    {
      objects[local.i].Build();
      objects[local.i].BuildSubobjects();
    }
    PostBuild();
  };

World.Setup = fun ()
  {
    # This should be overwritten in the theme code
  };

World.PostBuild = fun ()
  {
    # This should be overwritten in the theme code, all the positioning should be here
  };

World.Tick = fun ()
  {
    tick++;
  };

World.Update = fun (new_time, progress)
  {
    delta = (new_time - time) * speed;
    if (delta > 0.0)
    {
      time = new_time;
      for (local.i = 0; local.i < Array.Size(objects); local.i++)
      {
        objects[local.i].Update(delta);
        objects[local.i].UpdateSubobjects(delta);
      }
    }
    if (this.progress_bar) {
      this.progress_bar.UpdateProgress(progress);
    }
  };

World.Add = fun (object, name)
  {
    object.world = this;
    if (object.class == "ProgressBar") this.progress_bar = object;
    if (object.class == "MessageScroll") this.message_scroll = object;
    if (object.class == "Dialog") this.dialog = object;
    if (object.class == "PasswordDialog") this.password_dialog = object;
    Array.Add(objects, object);
    objects_by_name[name | object.id] = object;
  };

World.ProcessMessage = fun (message)
  {
    if (message_scroll) message_scroll.Add(message);
    Debug("ProcessMessage: " + message, 3);
  };

World.UpdateStatus = fun (status)
  {
    if (message_scroll) message_scroll.Add(status);
    Debug("UpdateStatus: " + status, 3);
  };

World.DisplayQuestion = fun (prompt, entry)
  {
    if (this.dialog) this.dialog.Prompt(prompt, entry);
    Debug("DisplayQuestion: " + prompt + ": " + entry, 3);
  };

World.AskPassword = fun (prompt, bullets_size)
  {
    if (this.password_dialog) this.password_dialog.Prompt(prompt, bullets_size);
    Debug("AskPassword: " + prompt + ": " + String.Bullets(bullets_size), 3);
  };

World.DisplayNormal = fun ()
  {
    if (this.dialog) this.dialog.Hide();
    if (this.password_dialog) this.password_dialog.Hide();
    Debug("", 3);
  };

World.GetX = fun ()
  {
    return 0.0;
  };

World.GetY = fun ()
  {
    return 0.0;
  };

World.GetWidth = fun ()
  {
    return width;
  };

World.GetHeight = fun ()
  {
    return height;
  };
